
<input data-bind="value: appName" />
<input data-bind="value: envName" />
<button data-bind="click: loadConfig">load</button>
<div data-bind="if: config">
    <ul data-bind="foreach: config().appSettings">
        <li><input data-bind="value: key" /> <input data-bind="value: value" /><button data-bind="click: $parent.deleteSetting">X</button></li>
    </ul>
</div>
<button data-bind="click: addAppSetting">add setting</button>

<button data-bind="click: saveConfig">save</button>

@section scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/knockout/3.3.0/knockout-min.js"></script>
    <script>
        function ApiAccess() {
            var self = this;

            self.get = function(url, success, error) {
                makeRequest('GET', url, undefined, success, error);
            }

            self.post = function(url, data, success, error) {
                makeRequest('POST', url, data, success, error);
            }

            function makeRequest(method, url, data, success, error) {
                //http://youmightnotneedjquery.com/#request
                var request = new XMLHttpRequest();
                request.open(method, url, true);

                request.setRequestHeader('Content-Type', 'application/json');

                request.onload = function() {
                    if (this.status >= 200 && this.status < 400) {
                        success(JSON.parse(this.response || '{}'));
                    } else {
                        // We reached our target server, but it returned an error
                        error(this.response);
                    }
                };

                request.onerror = function() {
                    // There was a connection error of some sort
                    error(this.response);
                };

                var stringData = JSON.stringify(data);
                request.send(stringData);
            }
        }
    </script>
    <script>
        var ko = ko;
        var $ = new ApiAccess();

        function ConfigManagerViewModel() {
            var self = this;

            self.config = ko.observable();

            self.appName = ko.observable('example_app');
            self.envName = ko.observable('test');

            self.apiUrl = ko.computed(function() {
                return '/api/applications/' + self.appName() + '/envs/' + self.envName();
            });

            self.addAppSetting = function() {
                if (self.config()) {
                    self.config().appSettings.push(new AppSettingViewModel('*todo*', '*also todo*'));
                }
            };

            self.loadConfig = function() {
                $.get(self.apiUrl(), function(data) {
                    self.config(new ConfigurationViewModel(data));
                });
            };

            self.saveConfig = function() {
                $.post(self.apiUrl(), self.config().toRawConfig(), function(data) {
                    console.log(data);
                });
            };
        }

        function ConfigurationViewModel(rawConfig) {
            var self = this;

            self.appSettings = ko.observableArray([]);

            self.deleteSetting = function(setting) {
                self.appSettings.remove(setting);
            };

            self.toRawConfig = function() {
                var result = {
                    AppSettings: {},
                    ConnectionStrings: {}
                };
                var rawAppSettings = self.appSettings();
                rawAppSettings.forEach(function(setting) {
                    result.AppSettings[setting.key()] = setting.value();
                });

                return result;
            };

            for (var key in rawConfig.AppSettings) {
                self.appSettings.push(new AppSettingViewModel(key, rawConfig.AppSettings[key]));
            }
        }

        function AppSettingViewModel(key, value) {
            var self = this;

            self.key = ko.observable(key);
            self.value = ko.observable(value);
        }

        ko.applyBindings(new ConfigManagerViewModel());
    </script>
}
